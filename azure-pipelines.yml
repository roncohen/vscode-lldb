variables:
  lldbBuildId: 1552
  lldbBuildProject: 'llvm'
  lldbBuildPipeline: 'llvm-project'
  rustcVersion: '1.47.0'
  cacheDiscr: F
  AZP_CACHING_CONTENT_FORMAT: SingleTar
  AZP_CACHING_TAR: true

  setenvLinux: |
      export PATH=$HOME/.cargo/bin:$PATH
      echo "$(publicRelease)"
  setenvOSX: |
      export PATH=$HOME/.cargo/bin:$PATH
      echo "$(publicRelease)"
  setenvWindows: |
      set PATH=%USERPROFILE%\.cargo\bin;%PATH%
      set PYTHONHOME=%USEPYTHONVERSION_PYTHONLOCATION%
      set PYTHONPATH=%PYTHONHOME%\Lib;%PYTHONHOME%\DLLs
      echo "$(publicRelease)"

########################################################################################################################

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  strategy:
    matrix:
      x86_64:
        PlatformId: 'x86_64-linux'
        Triple: 'x86_64-linux-gnu'
        RustTarget: 'x86_64-unknown-linux-gnu'
        CrossBuilding: false
      arm:
        PlatformId: 'arm-linux'
        Triple: 'arm-linux-gnueabihf'
        RustTarget: 'armv7-unknown-linux-gnueabihf'
        CrossBuilding: true
      aarch64:
        PlatformId: 'aarch64-linux'
        Triple: 'aarch64-linux-gnu'
        RustTarget: 'aarch64-unknown-linux-gnu'
        CrossBuilding: true

  variables:
    cachePrefix: $(cacheDiscr) | $(Triple)

  container:
    image: 'vadimcn/linux-builder:latest'
    options: --privileged

  steps:

  - script: |
      rustup self update
      rustup toolchain install $(rustcVersion)
      rustup default $(rustcVersion)
      rustup target add $(RustTarget)
      rustup show
    displayName: 'Install Rust'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project:  $(lldbBuildProject)
      pipeline: $(lldbBuildPipeline)
      buildId:  $(lldbBuildId)
      buildVersionToDownload: specific
      downloadType: single
      artifactName: 'lldb--$(Triple)'
      itemPattern: 'lldb--$(Triple)/lldb--$(Triple).zip'
      downloadPath: '$(Agent.BuildDirectory)/D'
    displayName: 'Download LLDB'

  - task: CacheBeta@0
    inputs:
      key: $(cachePrefix) | node_modules | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | node_modules | $(Build.BuildId)
        $(cachePrefix) | node_modules
      path: $(Build.SourcesDirectory)/build/node_modules
      continueOnError: true
    displayName: Cache node_modules
    condition: always()

  - script: |
      $(setenvLinux)
      echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

      mkdir build
      cd build
      cmake -DVERSION_SUFFIX=$(versionSuffix)\
            -DCMAKE_BUILD_TYPE=RelWithDebInfo\
            -DTEST_TIMEOUT=30000\
            -DLLDB_PACKAGE=$(Agent.BuildDirectory)/D/lldb--$(Triple)/lldb--$(Triple).zip\
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchain-$(Triple).cmake\
            ..
      cat CMakeCache.txt
    displayName: 'Configure'

  - script: |
      $(setenvLinux)
      cmake --build build --target vsix_bootstrap
      cmake -E copy build/codelldb-bootstrap.vsix $(Build.ArtifactStagingDirectory)/codelldb-bootstrap.vsix
      cmake -E copy build/package.json $(Build.ArtifactStagingDirectory)/package.json
    displayName: 'Build bootstrap package'
    condition: not(eq(variables.CrossBuilding, 'true'))

  - script: |
      $(setenvLinux)
      cmake --build build --target vsix_full
      cmake -E copy build/codelldb-full.vsix $(Build.ArtifactStagingDirectory)/codelldb-$(PlatformId).vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'codelldb-$(PlatformId)'

  - script: |
      $(setenvLinux)
      cmake --build build --target check
    displayName: 'Test'
    condition: not(eq(variables.CrossBuilding, 'true'))

  - script: |
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(Agent.BuildDirectory)
    displayName: 'On Failure'
    condition: failed()

########################################################################################################################

- job: OSX
  pool:
    vmImage: 'macOS 10.14'

  strategy:
    matrix:
      x86_64:
        PlatformId: 'x86_64-darwin'
        Triple: 'x86_64-apple-darwin'
        RustTarget: 'x86_64-apple-darwin'
        CrossBuilding: false
      aarch64:
        PlatformId: 'aarch64-darwin'
        Triple: 'aarch64-apple-darwin'
        RustTarget: 'aarch64-apple-darwin'
        rustcVersion: 'beta'
        CrossBuilding: true

  variables:
    cachePrefix: $(cacheDiscr) | $(Triple)

  steps:

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project:  $(lldbBuildProject)
      pipeline: $(lldbBuildPipeline)
      buildId:  $(lldbBuildId)
      buildVersionToDownload: specific
      downloadType: single
      artifactName: 'lldb--$(Triple)'
      itemPattern: 'lldb--$(Triple)/lldb--$(Triple).zip'
      downloadPath: '$(Agent.BuildDirectory)/D'
    displayName: 'Download LLDB'

  - task: CacheBeta@0
    inputs:
      key: $(cachePrefix) | node_modules | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | node_modules | $(Build.BuildId)
        $(cachePrefix) | node_modules
      path: $(Build.SourcesDirectory)/build/node_modules
      continueOnError: true
    displayName: Cache node_modules
    condition: always()

  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -v -y --profile minimal --default-toolchain none
      source $HOME/.cargo/env
      rustup toolchain install $(rustcVersion)
      rustup default $(rustcVersion)
      rustup add target $(Triple)
      rustup show
    displayName: 'Install Rust'

  - script: |
      $(setenvOSX)

      mkdir build
      cd build
      cmake -DVERSION_SUFFIX=$(versionSuffix)\
            -DCMAKE_BUILD_TYPE=RelWithDebInfo\
            -DTEST_TIMEOUT=30000\
            -DLLDB_PACKAGE=$(Agent.BuildDirectory)/D/lldb--$(Triple)/lldb--$(Triple).zip\
            ..
      cat CMakeCache.txt
    displayName: 'Configure'

  - script: |
      $(setenvOSX)
      cmake --build build --target vsix_full
      cmake -E copy build/codelldb-full.vsix $(Build.ArtifactStagingDirectory)/codelldb-$(PlatformId).vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'codelldb-$(PlatformId)'

  - script: |
      $(setenvOSX)
      cmake --build build --target check
    displayName: 'Test'

  - script: |
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(Agent.BuildDirectory)
    displayName: 'On Failure'
    condition: failed()

 ########################################################################################################################

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'

  variables:
    cachePrefix: $(cacheDiscr) | x86_64-windows
    PlatformId: 'x86_64-windows'
    Triple: 'x86_64-windows-msvc'

  steps:

  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      addToPath: true
      architecture: 'x64'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project:  $(lldbBuildProject)
      pipeline: $(lldbBuildPipeline)
      buildId:  $(lldbBuildId)
      buildVersionToDownload: specific
      downloadType: single
      artifactName: 'lldb--$(Triple)'
      itemPattern: 'lldb--$(Triple)/lldb--$(Triple).zip'
      downloadPath: '$(Agent.BuildDirectory)/D'
    displayName: 'Download LLDB'

  - task: CacheBeta@0
    inputs:
      key: $(cachePrefix) | node_modules | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | node_modules | $(Build.BuildId)
        $(cachePrefix) | node_modules
      path: $(Build.SourcesDirectory)/build/node_modules
      continueOnError: true
    displayName: Cache node_modules
    condition: always()

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -arch=amd64 -host_arch=amd64
      modifyEnvironment: true
    displayName: VsDevCmd

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -v -y --profile minimal --default-toolchain none
      set PATH=%USERPROFILE%\.cargo\bin;%PATH%
      rustup toolchain install $(rustcVersion)-x86_64-pc-windows-gnu
      rustup default $(rustcVersion)-x86_64-pc-windows-gnu
      rustup target add x86_64-pc-windows-msvc
      rustup show
    displayName: 'Install Rust'

  - script: |
      choco install ninja
      choco install zip
    displayName: 'Install other'

  - script: |
      $(setenvWindows)
      mkdir build
      cd build
      cmake -GNinja^
            -DVERSION_SUFFIX=$(versionSuffix)^
            -DCMAKE_BUILD_TYPE=RelWithDebInfo^
            -DTEST_TIMEOUT=30000^
            -DLLDB_PACKAGE=$(Agent.BuildDirectory)/D/lldb--$(Triple)/lldb--$(Triple).zip^
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchain-x86_64-windows-msvc.cmake^
            -DPython3_ROOT_DIR=%USEPYTHONVERSION_PYTHONLOCATION%^
            ..
      type CMakeCache.txt
    displayName: 'Configure'

  - script: |
      $(setenvWindows)
      cmake --build build --target vsix_full
      cmake -E copy build/codelldb-full.vsix $(Build.ArtifactStagingDirectory)/codelldb-$(PlatformId).vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'codelldb-$(PlatformId)'

  - script: |
      $(setenvWindows)
      cmake --build build --target check
    displayName: 'Test'

  - script: |
      echo - env ------------------
      env
      echo - dir -----------------------
      ls -R $(Agent.BuildDirectory)
    displayName: 'On Failure'
    condition: failed()
